<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChooseFolder.Content" xml:space="preserve">
    <value>选择图片文件夹</value>
  </data>
  <data name="CropInfo" xml:space="preserve">
    <value>选框大小：{0} x {1}</value>
  </data>
  <data name="CropOption.Text" xml:space="preserve">
    <value>截图选项：</value>
  </data>
  <data name="CurrentImageInfo" xml:space="preserve">
    <value>当前图片：{0}</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>批量截图</value>
  </data>
  <data name="FixedRatio.Content" xml:space="preserve">
    <value>固定比例</value>
  </data>
  <data name="FixedSize.Content" xml:space="preserve">
    <value>固定大小</value>
  </data>
  <data name="Help.Text" xml:space="preserve">
    <value>帮助</value>
  </data>
  <data name="Increment.Text" xml:space="preserve">
    <value>单位递增：</value>
  </data>
  <data name="InitialLength.Text" xml:space="preserve">
    <value>初始长度：</value>
  </data>
  <data name="NoImageFound" xml:space="preserve">
    <value>未找到图片</value>
  </data>
  <data name="NoMoreImage" xml:space="preserve">
    <value>未选择图片文件夹或截图已完成</value>
  </data>
  <data name="PleaseChoose.PlaceholderText" xml:space="preserve">
    <value>请选择</value>
  </data>
  <data name="Ratio.Text" xml:space="preserve">
    <value>长：高=</value>
  </data>
  <data name="Tip1.Text" xml:space="preserve">
    <value>1. 选择截图方式，固定比例或固定大小。</value>
  </data>
  <data name="Tip2.Text" xml:space="preserve">
    <value>2. 固定比例方式：输入长、高比，初始长度；固定大小方式：输入截图大小。</value>
  </data>
  <data name="Tip3.Text" xml:space="preserve">
    <value>3. 选择图片所在文件夹，文件夹中的图片（不包括子文件夹中的图片）将进行截图，支持jpg、jpeg、png、bmp、ico、gif等格式的图片。</value>
  </data>
  <data name="Tip4.Text" xml:space="preserve">
    <value>4. 截图存放在本地图片库下以“cliped"开头的文件夹中。</value>
  </data>
  <data name="Tip5.Text" xml:space="preserve">
    <value>5. 截图时，左键点击为截图并跳到下一张图片；右键点击为跳过当前图片；固定比例截图时可通过鼠标滚轮调整选框大小。</value>
  </data>
</root>